{"version":3,"file":"d-modal.js","sourceRoot":"","sources":["../../../src/components/d-modal/d-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    Event,\n    EventEmitter,\n    Host,\n    Method,\n    Prop,\n    h,\n} from \"@stencil/core\";\n\n@Component({\n    tag: \"d-modal\",\n    styleUrl: \"d-modal.css\",\n    shadow: true,\n})\nexport class DModal {\n    @Prop({\n        attribute: \"show\",\n        mutable: true,\n        reflect: true,\n    })\n    show: boolean = false;\n\n    @Prop()\n    width: string = \"520px\";\n\n    @Prop({\n        attribute: \"show-header\",\n        mutable: true,\n        reflect: true,\n    })\n    showHeader: boolean = true;\n\n    @Prop({\n        attribute: \"header\",\n    })\n    header: string = \"\";\n\n    @Prop({\n        attribute: \"mask-closable\",\n        mutable: true,\n        reflect: true,\n    })\n    maskClosable: boolean = true;\n\n    @Prop({\n        attribute: \"show-footer\",\n        mutable: true,\n        reflect: true,\n    })\n    showFooter: boolean = true;\n\n    @Prop({\n        attribute: \"confirm-text\",\n    })\n    confirmText: string = \"确定\";\n\n    @Prop({\n        attribute: \"cancel-text\",\n    })\n    cancelText: string = \"取消\";\n\n    renderHeader() {\n        if (this.showHeader) {\n            return (\n                <div class=\"ivy-modal-header\">\n                    <div class=\"ivy-modal-title\">\n                        <slot name=\"header\">{this.header}</slot>\n                    </div>\n                    <div\n                        class=\"ivy-modal-close\"\n                        onClick={this.close.bind(this)}>\n                        ×\n                    </div>\n                </div>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    renderFooter() {\n        if (this.showFooter) {\n            return (\n                <div class=\"ivy-modal-footer\">\n                    <button\n                        class=\"ivy-modal-btn ivy-modal-btn-cancel\"\n                        onClick={this.cancel.bind(this)}>\n                        {this.cancelText}\n                    </button>\n                    <button\n                        class=\"ivy-modal-btn ivy-modal-btn-confirm\"\n                        onClick={this.confirm.bind(this)}>\n                        {this.confirmText}\n                    </button>\n                </div>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        return (\n            <Host show={this.show}>\n                <div\n                    class=\"ivy-mask\"\n                    onClick={this.maskClose.bind(this)}></div>\n                <div\n                    class=\"ivy-modal\"\n                    style={{ width: this.width }}>\n                    {this.renderHeader()}\n                    <div class=\"ivy-modal-body\">\n                        <slot></slot>\n                    </div>\n                    {this.renderFooter()}\n                </div>\n            </Host>\n        );\n    }\n\n    @Event() onClose: EventEmitter;\n    @Event() onConfirm: EventEmitter;\n    @Event() onCancel: EventEmitter;\n\n    closeHandler() {\n        this.onClose.emit();\n    }\n\n    confirmHandler() {\n        this.onConfirm.emit();\n    }\n\n    cancelHandler() {\n        this.onCancel.emit();\n    }\n\n    @Method()\n    async open() {\n        this.show = true;\n    }\n\n    @Method()\n    async close() {\n        this.closeHandler();\n        this.show = false;\n    }\n\n    @Method()\n    async confirm() {\n        this.confirmHandler();\n        this.show = false;\n    }\n\n    @Method()\n    async cancel() {\n        this.cancelHandler();\n        this.show = false;\n    }\n\n    maskClose() {\n        if (this.maskClosable) {\n            this.show = false;\n        }\n    }\n}\n"]}